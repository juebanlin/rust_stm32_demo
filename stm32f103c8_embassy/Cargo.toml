[package]
name = "stm32f103c8embassy"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[features]
#default=["stm32f1xx-hal/rt"]

[dependencies]
#cargo embed + rtt 在主机终端上显示调试信息 rprintln!("Hello, world!");
rtt-target = "0.5.0"
#OpenOCD+Semihosting 在主机终端上显示调试信息 hprintln!("Hello, world!").unwrap();
#cortex-m-semihosting = "0.5.0"

#stm32会自动依赖一下三个包
embassy-stm32 = { version = "0.1.0",  features = ["stm32f103c8", "unstable-pac", "memory-x", "time-driver-any" ]  }
embassy-sync = { version = "0.5.0",  features = [] }
embassy-executor = { version = "0.5.0",  features = ["arch-cortex-m", "executor-thread", "integrated-timers"] }
embassy-time = { version = "0.3.0",  features = [ "defmt-timestamp-uptime", "tick-hz-32_768"] }
embassy-usb = { version = "0.1.0",  features = [] }
embassy-futures = { version = "0.1.1" }
#
#defmt = "0.3.6"
#defmt-rtt = "0.4"

cortex-m = { version = "0.7.7", features = ["inline-asm", "critical-section-single-core"] }
cortex-m-rt = "0.7.3"
embedded-hal = "0.2.7"
#panic-probe = { version = "0.3.1", features = ["print-defmt"] }
futures = { version = "0.3.30", default-features = false, features = ["async-await"] }
heapless = { version = "0.8", default-features = false }
nb = "1.1.0"

#alloc-cortex-m = "0.4.4"

byteorder = { version = "1.4.3", default-features = false}
micromath = "2.1.0"

[profile.dev]
opt-level = 3 #调整优化等级
lto = true
codegen-units = 1
incremental = false #禁用增量编译

#如果出现flash overflowed则使用cargo embed --release编译,不用修改memory.x的FLASH : ORIGIN 大小为128K,毕竟某些芯片
[profile.release]
strip = true #编译时去掉符号和调试信息
opt-level = 'z' #调整优化等级
lto = true  #链接时优化 better optimizations
codegen-units = 1 #调整并行代码生成单元数量  better optimization
panic = 'abort' #异常时终止,不打印堆栈
incremental = false #禁用增量编译
debug = false # symbols are nice and they don't increase the size on Flash,"true" is ok, symbols reside on the host, not the target